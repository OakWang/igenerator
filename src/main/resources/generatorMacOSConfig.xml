<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXByExample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXByExample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="mysql" defaultModelType="flat" targetRuntime="MyBatis3Simple">

        <!-- 生成的 Java 文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 格式化 Java 代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!-- 格式化 XML 代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 自定义注释生成器 -->
        <commentGenerator type="igenerator.comment.MySQLCommentGenerator">
            <property name="author" value="itoak"/>
        </commentGenerator>

        <!-- 数据库链接URL、用户名、密码；需要自定义connectionURL、userId、password -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://127.0.0.1:3306/my_database"
                        userId="userId"
                        password="password">
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>

        <!-- 生成模型的包名和位置；需要自定义targetPackage -->
        <javaModelGenerator targetPackage="cn.itoak.po" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成的映射文件包名和位置；需要自定义targetPackage -->
        <sqlMapGenerator targetPackage="cn.itoak.sqlmap" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 生成DAO的包名和位置；需要自定义targetPackage -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="cn.itoak.dao" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!--
            要生成哪些表；需要自定义tableName、domainObjectName、mapperName
            示例：
            <table schema="dispatch" delimitAllColumns="true" delimitIdentifiers="`" tableName="lb_dual_call" domainObjectName="DualCallPO" mapperName="DualCallDAO">
                <generatedKey column="id" sqlStatement="JDBC" identity="true"/>
                <columnOverride column="asr_flag" javaType="java.lang.Integer" jdbcType="TINYINT"/>
            </table>
            说明：
            columnOverride用于类型转换，如数据库tinyint转换为Integer
        -->
        <table schema="dispatch" delimitAllColumns="true"
               tableName="lb_dual_call" domainObjectName="DualCallPO" mapperName="DualCallDAO">
            <generatedKey column="id" sqlStatement="JDBC" identity="true"/>
            <!-- 将tinyint转换为Integer类型 -->
            <columnOverride column="asr_flag" javaType="java.lang.Integer" jdbcType="TINYINT"/>
        </table>
        <table schema="dispatch" delimitAllColumns="true"
               tableName="lb_data" domainObjectName="DataPO" mapperName="DataDAO">
            <generatedKey column="id" sqlStatement="JDBC" identity="true"/>
        </table>

    </context>
</generatorConfiguration>